package components

import (
	"database/sql"
	"github.com/nicolashery/simply-shared-notes/app/db"
	"github.com/nicolashery/simply-shared-notes/app/rctx"
	"github.com/nicolashery/simply-shared-notes/app/views/helpers"
	"time"
)

templ CreatedUpdatedAtBy(
	createdAt time.Time, updatedAt time.Time,
	createdBy sql.NullInt64, updatedBy sql.NullInt64,
	membersByID map[int64]db.Member,
) {
	<div class="flex flex-col gap-1.5">
		@CreatedAtBy(createdAt, createdBy, membersByID)
		if updatedAt != createdAt {
			@UpdatedAtBy(updatedAt, updatedBy, membersByID)
		}
	</div>
}

templ CreatedAtBy(
	createdAt time.Time,
	createdBy sql.NullInt64,
	membersByID map[int64]db.Member,
) {
	{{ intl := rctx.GetIntl(ctx) }}
	<div class="text-xs">
		<span class="opacity-50">{ "Created by " }</span>
		<span class="opacity-75">{ helpers.DisplayMemberName(createdBy, membersByID) }</span>
		<span class="opacity-50">{ " on " } </span>
		<span class="opacity-75">{ intl.FormatDate(createdAt) }</span>
		<span class="opacity-50">{ " at " } </span>
		<span class="opacity-75">{ intl.FormatTime(createdAt) }</span>
	</div>
}

templ UpdatedAtBy(
	updatedAt time.Time,
	updatedBy sql.NullInt64,
	membersByID map[int64]db.Member,
) {
	{{ intl := rctx.GetIntl(ctx) }}
	<div class="text-xs">
		<span class="opacity-50">{ " Updated by " }</span>
		<span class="opacity-75">{ helpers.DisplayMemberName(updatedBy, membersByID) }</span>
		<span class="opacity-50">{ " on " }</span>
		<span class="opacity-75">{ intl.FormatDate(updatedAt) }</span>
		<span class="opacity-50">{ " at " }</span>
		<span class="opacity-75">{ intl.FormatTime(updatedAt) }</span>
	</div>
}
