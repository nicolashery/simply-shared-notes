package pages

import (
	"fmt"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"github.com/nicolashery/simply-shared-notes/app/db"
	"github.com/nicolashery/simply-shared-notes/app/rctx"
	"github.com/nicolashery/simply-shared-notes/app/views/helpers"
	"github.com/nicolashery/simply-shared-notes/app/views/layouts"
	"time"
)

templ ActivityShow(activity db.Activity, membersByID map[int64]db.Member, notesByID map[int64]db.Note) {
	{{ access := rctx.GetAccess(ctx) }}
	{{ space := rctx.GetSpace(ctx) }}
	{{ intl := rctx.GetIntl(ctx) }}
	@layouts.Space(nil) {
		<div>
			<h1 class="text-2xl font-bold mb-2">
				{ intl.Localize(&i18n.LocalizeConfig{
					DefaultMessage: &i18n.Message{
						ID:    "Activity.Show.Title",
						Other: "Activity",
					},
				}) }
			</h1>
			<div class="mb-2">
				<a
					href={ templ.URL(fmt.Sprintf("/s/%s/activity", access.Token)) }
					class="btn btn-sm"
				>
					<svg
						class="size-4"
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="lucide lucide-arrow-left-icon lucide-arrow-left"
					>
						<path d="m12 19-7-7 7-7"></path><path d="M19 12H5"></path>
					</svg>
					{ intl.Localize(&i18n.LocalizeConfig{
						DefaultMessage: &i18n.Message{
							ID:    "Activity.Show.BackButton",
							Other: "Back to all activity",
						},
					}) }
				</a>
			</div>
			<div class="list max-w-sm">
				<div class="list-row px-0 items-center">
					<div class="font-semibold list-col-grow">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Activity.Show.TimeLabel",
								Other: "Time",
							},
						}) }
					</div>
					<time class="opacity-60" datetime={ activity.CreatedAt.Format(time.RFC3339) }>
						{ intl.FormatDate(activity.CreatedAt) }
						{ " " }
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Activity.Show.AtConnector",
								Other: "at",
							},
						}) }
						{ " " }
						{ intl.FormatTime(activity.CreatedAt) }
					</time>
				</div>
				<div class="list-row px-0 items-center">
					<div class="font-semibold list-col-grow">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Activity.Show.MemberLabel",
								Other: "Member",
							},
						}) }
					</div>
					<div class="opacity-60">
						{ helpers.DisplayMemberName(intl, activity.MemberID, membersByID) }
					</div>
				</div>
				<div class="list-row px-0 items-center">
					<div class="font-semibold list-col-grow">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Activity.Show.ActionLabel",
								Other: "Action",
							},
						}) }
					</div>
					<div class="opacity-60">
						if activity.Action == db.ActivityAction_Create {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.ActionCreated",
									Other: "created",
								},
							}) }
						} else if activity.Action == db.ActivityAction_Update {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.ActionUpdated",
									Other: "updated",
								},
							}) }
						} else if activity.Action == db.ActivityAction_Delete {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.ActionDeleted",
									Other: "deleted",
								},
							}) }
						} else {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.ActionUnknown",
									Other: "[unknown action]",
								},
							}) }
						}
					</div>
				</div>
				<div class="list-row px-0 items-center">
					<div class="font-semibold list-col-grow">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Activity.Show.SubjectTypeLabel",
								Other: "Subject type",
							},
						}) }
					</div>
					<div class="opacity-60">
						if activity.EntityType == db.ActivityEntity_Space {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.EntitySpace",
									Other: "Space",
								},
							}) }
						} else if activity.EntityType == db.ActivityEntity_Member {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.EntityMember",
									Other: "Member",
								},
							}) }
						} else if activity.EntityType == db.ActivityEntity_Note {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.EntityNote",
									Other: "Note",
								},
							}) }
						} else {
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Activity.Show.EntityUnknown",
									Other: "Unknown Entity",
								},
							}) }
						}
					</div>
				</div>
				<div class="list-row px-0 items-center">
					<div class="font-semibold list-col-grow">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Activity.Show.SubjectLabel",
								Other: "Subject",
							},
						}) }
					</div>
					<div class="opacity-60">
						if activity.EntityType == db.ActivityEntity_Space {
							{ space.Name }
						} else if activity.EntityType == db.ActivityEntity_Member {
							if !activity.EntityID.Valid {
								{ intl.Localize(&i18n.LocalizeConfig{
									DefaultMessage: &i18n.Message{
										ID:    "Activity.Show.DeletedMember",
										Other: "Deleted Member",
									},
								}) }
							} else if member, ok := membersByID[activity.EntityID.Int64]; ok {
								<a
									class="link"
									href={ templ.URL(fmt.Sprintf("/s/%s/members/%s/edit", access.Token, member.PublicID)) }
								>
									{ member.Name }
								</a>
							} else {
								{ intl.Localize(&i18n.LocalizeConfig{
									DefaultMessage: &i18n.Message{
										ID:    "Activity.Show.UnknownMember",
										Other: "Unknown Member",
									},
								}) }
							}
						} else if activity.EntityType == db.ActivityEntity_Note {
							if !activity.EntityID.Valid {
								{ intl.Localize(&i18n.LocalizeConfig{
									DefaultMessage: &i18n.Message{
										ID:    "Activity.Show.DeletedNote",
										Other: "Deleted Note",
									},
								}) }
							} else if note, ok := notesByID[activity.EntityID.Int64]; ok {
								<a
									class="link"
									href={ templ.URL(fmt.Sprintf("/s/%s/notes/%s", access.Token, note.PublicID)) }
								>
									{ note.Title }
								</a>
							} else {
								{ intl.Localize(&i18n.LocalizeConfig{
									DefaultMessage: &i18n.Message{
										ID:    "Activity.Show.UnknownNote",
										Other: "Unknown Note",
									},
								}) }
							}
						}
					</div>
				</div>
			</div>
		</div>
	}
}
