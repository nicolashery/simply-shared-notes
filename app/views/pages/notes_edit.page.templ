package pages

import (
	"fmt"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"github.com/nicolashery/simply-shared-notes/app/db"
	"github.com/nicolashery/simply-shared-notes/app/forms"
	"github.com/nicolashery/simply-shared-notes/app/rctx"
	"github.com/nicolashery/simply-shared-notes/app/views/components"
	"github.com/nicolashery/simply-shared-notes/app/views/layouts"
)

templ NotesEdit(form *forms.UpdateNote, errors forms.Errors, membersByID map[int64]db.Member) {
	{{ intl := rctx.GetIntl(ctx) }}
	{{ access := rctx.GetAccess(ctx) }}
	{{ note := rctx.GetNote(ctx) }}
	@layouts.Space([]string{"assets/editor.js"}) {
		<div>
			<h1 class="text-2xl font-bold mb-4">
				{ intl.Localize(&i18n.LocalizeConfig{
					DefaultMessage: &i18n.Message{
						ID:    "Notes.Edit.Title",
						Other: "Edit note",
					},
				}) }
			</h1>
			<form
				method="POST"
				action={ templ.URL(fmt.Sprintf("/s/%s/notes/%s/edit", access.Token, note.PublicID)) }
				class="flex flex-col gap-4 mb-8"
			>
				<fieldset class="flex flex-col gap-1.5">
					<label for="title" class="text-sm font-semibold">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Notes.Edit.TitleLabel",
								Other: "Title",
							},
						}) }
					</label>
					<input
						type="text"
						name="title"
						id="title"
						value={ form.Title }
						class={ "input w-full", templ.KV("input-error", forms.HasError(errors, "title")) }
					/>
					for _, e := range forms.GetErrors(errors, "title") {
						<p class="text-sm text-error">
							{ e }
						</p>
					}
				</fieldset>
				<fieldset class="flex flex-col gap-1.5">
					<label for="content" class="text-sm font-semibold">
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Notes.Edit.ContentLabel",
								Other: "Content",
							},
						}) }
					</label>
					<p class="text-sm opacity-60">
						{{
							msg := intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Notes.Edit.ContentHelp",
									Other: "Uses %% Markdown %% syntax.",
								},
							})
							pre, post := intl.SplitOnSlot(msg, "%% Markdown %%")
						}}
						<span>{ pre }</span><a class="link" target="_blank" href="https://www.markdownguide.org/cheat-sheet/">Markdown</a><span>{ post }</span>
					</p>
					<div
						id="editor"
						class="h-100 textarea w-full p-0"
						data-value={ form.Content }
					></div>
					for _, e := range forms.GetErrors(errors, "content") {
						<p class="text-sm text-error">
							{ e }
						</p>
					}
				</fieldset>
				<div class="flex items-center justify-between mt-4">
					<div class="flex items-center gap-4">
						<button type="submit" class="btn btn-primary">
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Common.SaveButton",
									Other: "Save",
								},
							}) }
						</button>
						<a
							href={ templ.URL(fmt.Sprintf("/s/%s/notes/%s", access.Token, note.PublicID)) }
							class="btn btn-soft"
						>
							{ intl.Localize(&i18n.LocalizeConfig{
								DefaultMessage: &i18n.Message{
									ID:    "Common.CancelButton",
									Other: "Cancel",
								},
							}) }
						</a>
					</div>
					<a
						href={ templ.URL(fmt.Sprintf("/s/%s/notes/%s/delete", access.Token, note.PublicID)) }
						class="btn btn-soft btn-error"
					>
						{ intl.Localize(&i18n.LocalizeConfig{
							DefaultMessage: &i18n.Message{
								ID:    "Common.DeleteButton",
								Other: "Delete",
							},
						}) }
					</a>
				</div>
			</form>
			@components.CreatedUpdatedAtBy(note.CreatedAt, note.UpdatedAt, note.CreatedBy, note.UpdatedBy, membersByID)
		</div>
	}
}
