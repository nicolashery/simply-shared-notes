package pages

import (
	"fmt"
	"github.com/nicolashery/simply-shared-notes/app/db"
	"github.com/nicolashery/simply-shared-notes/app/rctx"
	"github.com/nicolashery/simply-shared-notes/app/views/helpers"
	"github.com/nicolashery/simply-shared-notes/app/views/layouts"
)

templ NotesList(notes []db.ListNotesRow) {
	{{ access := rctx.GetAccess(ctx) }}
	@layouts.Space() {
		<div>
			if len(notes) == 0 {
				<h1 class="text-2xl font-bold mb-2">Notes</h1>
				<div class="mb-3">This space doesn't have any notes yet.</div>
				<div>
					<a
						href={ templ.URL(fmt.Sprintf("/s/%s/notes/new", access.Token)) }
						class="btn btn-primary"
					>
						<svg
							class="size-5"
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<circle cx="12" cy="12" r="10"></circle>
							<path d="M8 12h8"></path>
							<path d="M12 8v8"></path>
						</svg>
						New note
					</a>
				</div>
			} else {
				<div class="flex justify-between items-center mb-2">
					<h1 class="text-2xl font-bold">Notes</h1>
					<a
						href={ templ.URL(fmt.Sprintf("/s/%s/notes/new", access.Token)) }
						class="btn btn-sm"
					>
						<svg
							class="size-4"
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<circle cx="12" cy="12" r="10"></circle>
							<path d="M8 12h8"></path>
							<path d="M12 8v8"></path>
						</svg>
						New note
					</a>
				</div>
				<ul class="list">
					for _, note := range notes {
						<li class="list-row px-0">
							<div>
								<a
									class="block mb-1 link link-primary link-hover text-lg"
									href={ templ.URL(fmt.Sprintf("/s/%s/notes/%s", access.Token, note.PublicID)) }
								>
									{ note.Title }
								</a>
								<div class="text-sm opacity-60">
									if note.UpdatedAt != note.CreatedAt {
										<span>Updated by </span>
										{ helpers.DisplayMemberName(note.UpdatedByName) }
										<span>on </span>
										{ helpers.FormatDate(note.UpdatedAt) }
										<span>at </span>
										{ helpers.FormatTime(note.UpdatedAt) }
									} else {
										<span>Created by </span>
										{ helpers.DisplayMemberName(note.CreatedByName) }
										<span>on </span>
										{ helpers.FormatDate(note.CreatedAt) }
										<span>at </span>
										{ helpers.FormatTime(note.CreatedAt) }
									}
								</div>
							</div>
						</li>
					}
				</ul>
			}
		</div>
	}
}
