// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: members.queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  created_at,
  updated_at,
  created_by,
  updated_by,
  space_id,
  public_id,
  name
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7
) RETURNING id, created_at, updated_at, created_by, updated_by, space_id, public_id, name
`

type CreateMemberParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	CreatedBy sql.NullInt64
	UpdatedBy sql.NullInt64
	SpaceID   int64
	PublicID  string
	Name      string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.SpaceID,
		arg.PublicID,
		arg.Name,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Name,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members WHERE id = ?
`

func (q *Queries) DeleteMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const getMemberByID = `-- name: GetMemberByID :one
SELECT id, created_at, updated_at, created_by, updated_by, space_id, public_id, name FROM members
WHERE id = ?1
LIMIT 1
`

func (q *Queries) GetMemberByID(ctx context.Context, id int64) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByID, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Name,
	)
	return i, err
}

const getMemberByPublicID = `-- name: GetMemberByPublicID :one
SELECT id, created_at, updated_at, created_by, updated_by, space_id, public_id, name FROM members
WHERE space_id = ?1
  AND public_id = ?2
LIMIT 1
`

type GetMemberByPublicIDParams struct {
	SpaceID  int64
	PublicID string
}

func (q *Queries) GetMemberByPublicID(ctx context.Context, arg GetMemberByPublicIDParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByPublicID, arg.SpaceID, arg.PublicID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Name,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, created_at, updated_at, created_by, updated_by, space_id, public_id, name FROM members
WHERE space_id = ?1
ORDER BY name, id
`

func (q *Queries) ListMembers(ctx context.Context, spaceID int64) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembers, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.SpaceID,
			&i.PublicID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :one
UPDATE members
SET updated_at = ?1,
  updated_by = ?2,
  name = ?3
WHERE id = ?4
RETURNING id, created_at, updated_at, created_by, updated_by, space_id, public_id, name
`

type UpdateMemberParams struct {
	UpdatedAt time.Time
	UpdatedBy sql.NullInt64
	Name      string
	MemberID  int64
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Name,
		arg.MemberID,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Name,
	)
	return i, err
}

const updateMemberCreatedBy = `-- name: UpdateMemberCreatedBy :exec
UPDATE members
SET created_by = ?1,
  updated_by = ?1
WHERE id = ?2
`

type UpdateMemberCreatedByParams struct {
	CreatedBy sql.NullInt64
	MemberID  int64
}

func (q *Queries) UpdateMemberCreatedBy(ctx context.Context, arg UpdateMemberCreatedByParams) error {
	_, err := q.db.ExecContext(ctx, updateMemberCreatedBy, arg.CreatedBy, arg.MemberID)
	return err
}
