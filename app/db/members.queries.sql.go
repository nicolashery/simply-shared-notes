// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: members.queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  created_at,
  updated_at,
  created_by,
  updated_by,
  space_id,
  public_id,
  name
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7
) RETURNING id, created_at, updated_at, created_by, updated_by, space_id, public_id, name
`

type CreateMemberParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	CreatedBy sql.NullInt64
	UpdatedBy sql.NullInt64
	SpaceID   int64
	PublicID  string
	Name      string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.SpaceID,
		arg.PublicID,
		arg.Name,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Name,
	)
	return i, err
}

const updateMemberCreatedBy = `-- name: UpdateMemberCreatedBy :exec
UPDATE members
SET created_by = ?1,
  updated_by = ?1
WHERE id = ?2
`

type UpdateMemberCreatedByParams struct {
	CreatedBy sql.NullInt64
	MemberID  int64
}

func (q *Queries) UpdateMemberCreatedBy(ctx context.Context, arg UpdateMemberCreatedByParams) error {
	_, err := q.db.ExecContext(ctx, updateMemberCreatedBy, arg.CreatedBy, arg.MemberID)
	return err
}
