// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notes.queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
  created_at,
  updated_at,
  created_by,
  updated_by,
  space_id,
  public_id,
  title,
  content
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8
) RETURNING id, created_at, updated_at, created_by, updated_by, space_id, public_id, title, content
`

type CreateNoteParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	CreatedBy sql.NullInt64
	UpdatedBy sql.NullInt64
	SpaceID   int64
	PublicID  string
	Title     string
	Content   string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.SpaceID,
		arg.PublicID,
		arg.Title,
		arg.Content,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Title,
		&i.Content,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNoteByPublicID = `-- name: GetNoteByPublicID :one
SELECT id, created_at, updated_at, created_by, updated_by, space_id, public_id, title, content FROM notes
WHERE space_id = ?1
  AND public_id = ?2
LIMIT 1
`

type GetNoteByPublicIDParams struct {
	SpaceID  int64
	PublicID string
}

func (q *Queries) GetNoteByPublicID(ctx context.Context, arg GetNoteByPublicIDParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteByPublicID, arg.SpaceID, arg.PublicID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Title,
		&i.Content,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, created_at, updated_at, created_by, updated_by, space_id, public_id, title, content FROM notes
WHERE space_id = ?1
ORDER BY
    updated_at DESC,
    id DESC
`

func (q *Queries) ListNotes(ctx context.Context, spaceID int64) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.SpaceID,
			&i.PublicID,
			&i.Title,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET updated_at = ?1,
  updated_by = ?2,
  title = ?3,
  content = ?4
WHERE id = ?5
RETURNING id, created_at, updated_at, created_by, updated_by, space_id, public_id, title, content
`

type UpdateNoteParams struct {
	UpdatedAt time.Time
	UpdatedBy sql.NullInt64
	Title     string
	Content   string
	NoteID    int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Title,
		arg.Content,
		arg.NoteID,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpaceID,
		&i.PublicID,
		&i.Title,
		&i.Content,
	)
	return i, err
}
