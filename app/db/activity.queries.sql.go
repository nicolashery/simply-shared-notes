// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: activity.queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activity (
  created_at,
  space_id,
  public_id,
  member_id,
  action,
  entity_type,
  entity_id
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7
) RETURNING id, created_at, space_id, public_id, member_id, "action", entity_type, entity_id
`

type CreateActivityParams struct {
	CreatedAt  time.Time
	SpaceID    int64
	PublicID   string
	MemberID   sql.NullInt64
	Action     string
	EntityType string
	EntityID   sql.NullInt64
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.CreatedAt,
		arg.SpaceID,
		arg.PublicID,
		arg.MemberID,
		arg.Action,
		arg.EntityType,
		arg.EntityID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SpaceID,
		&i.PublicID,
		&i.MemberID,
		&i.Action,
		&i.EntityType,
		&i.EntityID,
	)
	return i, err
}

const getActivityByPublicID = `-- name: GetActivityByPublicID :one
SELECT id, created_at, space_id, public_id, member_id, "action", entity_type, entity_id FROM activity
WHERE space_id = ?1
  AND public_id = ?2
LIMIT 1
`

type GetActivityByPublicIDParams struct {
	SpaceID  int64
	PublicID string
}

func (q *Queries) GetActivityByPublicID(ctx context.Context, arg GetActivityByPublicIDParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivityByPublicID, arg.SpaceID, arg.PublicID)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SpaceID,
		&i.PublicID,
		&i.MemberID,
		&i.Action,
		&i.EntityType,
		&i.EntityID,
	)
	return i, err
}

const listActivity = `-- name: ListActivity :many
SELECT id, created_at, space_id, public_id, member_id, "action", entity_type, entity_id FROM activity
WHERE space_id = ?1
ORDER BY
    created_at DESC,
    id DESC
LIMIT ?2
`

type ListActivityParams struct {
	SpaceID int64
	Limit   int64
}

func (q *Queries) ListActivity(ctx context.Context, arg ListActivityParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivity, arg.SpaceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.SpaceID,
			&i.PublicID,
			&i.MemberID,
			&i.Action,
			&i.EntityType,
			&i.EntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setActivityEntityIDToNull = `-- name: SetActivityEntityIDToNull :exec
UPDATE activity
SET entity_id = NULL
WHERE entity_type = ?1
  AND entity_id = ?2
`

type SetActivityEntityIDToNullParams struct {
	EntityType string
	EntityID   sql.NullInt64
}

func (q *Queries) SetActivityEntityIDToNull(ctx context.Context, arg SetActivityEntityIDToNullParams) error {
	_, err := q.db.ExecContext(ctx, setActivityEntityIDToNull, arg.EntityType, arg.EntityID)
	return err
}
