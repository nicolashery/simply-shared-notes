package intl

import (
	"github.com/Oudwins/zog/zconst"
)

var ZogFrenchMap zconst.LangMap = map[zconst.ZogType]map[zconst.ZogIssueCode]string{
	zconst.TypeString: {
		zconst.NotIssueCode(zconst.IssueCodeLen):             "la chaîne ne doit pas contenir exactement {{len}} caractère(s)",
		zconst.NotIssueCode(zconst.IssueCodeEmail):           "ne doit pas être un email valide",
		zconst.NotIssueCode(zconst.IssueCodeUUID):            "ne doit pas être un UUID valide",
		zconst.NotIssueCode(zconst.IssueCodeMatch):           "la chaîne est invalide",
		zconst.NotIssueCode(zconst.IssueCodeURL):             "ne doit pas être une URL valide",
		zconst.NotIssueCode(zconst.IssueCodeHasPrefix):       "la chaîne ne doit pas commencer par {{prefix}}",
		zconst.NotIssueCode(zconst.IssueCodeHasSuffix):       "la chaîne ne doit pas se terminer par {{suffix}}",
		zconst.NotIssueCode(zconst.IssueCodeContains):        "la chaîne ne doit pas contenir {{contained}}",
		zconst.NotIssueCode(zconst.IssueCodeContainsDigit):   "la chaîne ne doit pas contenir de chiffres",
		zconst.NotIssueCode(zconst.IssueCodeContainsUpper):   "la chaîne ne doit pas contenir de lettres majuscules",
		zconst.NotIssueCode(zconst.IssueCodeContainsLower):   "la chaîne ne doit pas contenir de lettres minuscules",
		zconst.NotIssueCode(zconst.IssueCodeContainsSpecial): "la chaîne ne doit pas contenir de caractères spéciaux",
		zconst.NotIssueCode(zconst.IssueCodeOneOf):           "la chaîne ne doit pas être parmi {{one_of_options}}",
		zconst.IssueCodeRequired:                             "est requis",
		zconst.IssueCodeNotNil:                               "ne doit pas être vide",
		zconst.IssueCodeMin:                                  "doit contenir au moins {{min}} caractère(s)",
		zconst.IssueCodeMax:                                  "doit contenir au plus {{max}} caractère(s)",
		zconst.IssueCodeLen:                                  "doit contenir exactement {{len}} caractère(s)",
		zconst.IssueCodeEmail:                                "doit être un email valide",
		zconst.IssueCodeUUID:                                 "doit être un UUID valide",
		zconst.IssueCodeMatch:                                "la chaîne est invalide",
		zconst.IssueCodeURL:                                  "doit être une URL valide",
		zconst.IssueCodeHasPrefix:                            "doit commencer par {{prefix}}",
		zconst.IssueCodeHasSuffix:                            "doit se terminer par {{suffix}}",
		zconst.IssueCodeContains:                             "doit contenir {{contained}}",
		zconst.IssueCodeContainsDigit:                        "doit contenir au moins un chiffre",
		zconst.IssueCodeContainsUpper:                        "doit contenir au moins une lettre majuscule",
		zconst.IssueCodeContainsLower:                        "doit contenir au moins une lettre minuscule",
		zconst.IssueCodeContainsSpecial:                      "doit contenir au moins un caractère spécial",
		zconst.IssueCodeOneOf:                                "doit être parmi {{one_of_options}}",
		zconst.IssueCodeFallback:                             "la chaîne est invalide",
	},
	zconst.TypeBool: {
		zconst.IssueCodeRequired: "est requis",
		zconst.IssueCodeNotNil:   "ne doit pas être vide",
		zconst.IssueCodeTrue:     "doit être vrai",
		zconst.IssueCodeEQ:       "doit être égal à {{eq}}",
		zconst.IssueCodeFalse:    "doit être faux",
		zconst.IssueCodeFallback: "la valeur est invalide",
	},
	zconst.TypeNumber: {
		zconst.IssueCodeRequired:                   "est requis",
		zconst.IssueCodeNotNil:                     "ne doit pas être vide",
		zconst.IssueCodeLTE:                        "doit être inférieur ou égal à {{lte}}",
		zconst.IssueCodeLT:                         "doit être inférieur à {{lt}}",
		zconst.IssueCodeGTE:                        "doit être supérieur ou égal à {{gte}}",
		zconst.IssueCodeGT:                         "doit être supérieur à {{gt}}",
		zconst.IssueCodeEQ:                         "doit être égal à {{eq}}",
		zconst.NotIssueCode(zconst.IssueCodeEQ):    "ne doit pas être égal à {{eq}}",
		zconst.IssueCodeOneOf:                      "doit être parmi {{one_of_options}}",
		zconst.NotIssueCode(zconst.IssueCodeOneOf): "ne doit pas être parmi {{one_of_options}}",
		zconst.IssueCodeFallback:                   "le nombre est invalide",
	},
	zconst.TypeTime: {
		zconst.IssueCodeRequired: "est requis",
		zconst.IssueCodeNotNil:   "ne doit pas être vide",
		zconst.IssueCodeAfter:    "doit être après {{after}}",
		zconst.IssueCodeBefore:   "doit être avant {{before}}",
		zconst.IssueCodeEQ:       "doit être égal à {{eq}}",
		zconst.IssueCodeFallback: "l'heure est invalide",
	},
	zconst.TypeSlice: {
		zconst.IssueCodeRequired:                      "est requis",
		zconst.IssueCodeNotNil:                        "ne doit pas être vide",
		zconst.IssueCodeMin:                           "doit contenir au moins {{min}} élément(s)",
		zconst.IssueCodeMax:                           "doit contenir au plus {{max}} élément(s)",
		zconst.IssueCodeLen:                           "doit contenir exactement {{len}} élément(s)",
		zconst.NotIssueCode(zconst.IssueCodeLen):      "ne doit pas contenir exactement {{len}} élément(s)",
		zconst.IssueCodeContains:                      "doit contenir {{contained}}",
		zconst.NotIssueCode(zconst.IssueCodeContains): "ne doit pas contenir {{contained}}",
		zconst.IssueCodeFallback:                      "la liste est invalide",
	},
	zconst.TypeStruct: {
		zconst.IssueCodeRequired: "est requis",
		zconst.IssueCodeNotNil:   "ne doit pas être vide",
		zconst.IssueCodeFallback: "la structure est invalide",
		// JSON
		zconst.IssueCodeInvalidJSON: "corps JSON invalide",
		// ZHTTP ISSUES
		zconst.IssueCodeZHTTPInvalidForm:  "données de formulaire invalides",
		zconst.IssueCodeZHTTPInvalidQuery: "paramètres de requête invalides",
	},
}
